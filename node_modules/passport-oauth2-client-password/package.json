{
  "_args": [
    [
      {
        "raw": "passport-oauth2-client-password@https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
        "scope": null,
        "escapedName": "passport-oauth2-client-password",
        "name": "passport-oauth2-client-password",
        "rawSpec": "https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
        "spec": "https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
        "type": "remote"
      },
      "/Volumes/OSX-Storage/Documents/projects/viral-loop"
    ]
  ],
  "_from": "passport-oauth2-client-password@0.1.2",
  "_id": "passport-oauth2-client-password@0.1.2",
  "_inCache": true,
  "_location": "/passport-oauth2-client-password",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-oauth2-client-password@https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
    "scope": null,
    "escapedName": "passport-oauth2-client-password",
    "name": "passport-oauth2-client-password",
    "rawSpec": "https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
    "spec": "https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
  "_shasum": "4f378b678b92d16dbbd233a6c706520093e561ba",
  "_shrinkwrap": null,
  "_spec": "passport-oauth2-client-password@https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
  "_where": "/Volumes/OSX-Storage/Documents/projects/viral-loop",
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/passport-oauth2-client-password/issues"
  },
  "dependencies": {
    "passport-strategy": "1.x.x"
  },
  "description": "OAuth 2.0 client password authentication strategy for Passport.",
  "devDependencies": {
    "vows": "0.7.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "https://github.com/jaredhanson/passport-oauth2-client-password#readme",
  "keywords": [
    "passport",
    "oauth",
    "oauth2",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "api"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "name": "passport-oauth2-client-password",
  "optionalDependencies": {},
  "readme": "# passport-oauth2-client-password\n\nOAuth 2.0 client password authentication strategy for [Passport](https://github.com/jaredhanson/passport).\n\nThis module lets you authenticate requests containing client credentials in the\nrequest body, as [defined](http://tools.ietf.org/html/draft-ietf-oauth-v2-27#section-2.3.1)\nby the OAuth 2.0 specification.  These credentials are typically used protect\nthe token endpoint and used as an alternative to HTTP Basic authentication.\n\n## Install\n\n    $ npm install passport-oauth2-client-password\n\n## Usage\n\n#### Configure Strategy\n\nThe OAuth 2.0 client password authentication strategy authenticates clients\nusing a client ID and client secret.  The strategy requires a `verify` callback,\nwhich accepts those credentials and calls `done` providing a client.\n\n    passport.use(new ClientPasswordStrategy(\n      function(clientId, clientSecret, done) {\n        Clients.findOne({ clientId: clientId }, function (err, client) {\n          if (err) { return done(err); }\n          if (!client) { return done(null, false); }\n          if (client.clientSecret != clientSecret) { return done(null, false); }\n          return done(null, client);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'oauth2-client-password'`\nstrategy, to authenticate requests.  This strategy is typically used in\ncombination with HTTP Basic authentication (as provided by [passport-http](https://github.com/jaredhanson/passport-http)),\nallowing clients to include credentials in the request body.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication, using [OAuth2orize](https://github.com/jaredhanson/oauth2orize)\nmiddleware to implement the token endpoint:\n\n    app.get('/profile', \n      passport.authenticate(['basic', 'oauth2-client-password'], { session: false }),\n      oauth2orize.token());\n\n## Examples\n\nThe [example](https://github.com/jaredhanson/oauth2orize/tree/master/examples/express2)\nincluded with [OAuth2orize](https://github.com/jaredhanson/oauth2orize)\ndemonstrates how to implement a complete OAuth 2.0 authorization server.\n`ClientPasswordStrategy` is used to authenticate clients as they request access\ntokens from the token endpoint.\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-oauth2-client-password.png)](http://travis-ci.org/jaredhanson/passport-oauth2-client-password)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/passport-oauth2-client-password.git"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js"
  },
  "version": "0.1.2"
}
